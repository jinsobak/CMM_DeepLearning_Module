시작은 example.ipynb파일에서 시작

1번째 코드블럭: 코드에 필요한 라이브러리 임포트

2번째 코드블럭: 
dataset_path: 현재 파이썬 파일이 있는 경로(os라이브러리의 getcwd함수 사용) +  CMM데이터 텍스트 파일들이 있는 경로
-제 컴퓨터의 경우 
-C:\\gitFolder\\CMM_DeepLearning_Module\\references\\천세진 교수님 멘토링 자료\\CMM_analysis + \\datasets
data_list: os라이브러리의 listdir함수를 이용하여 데이터셋이 있는 폴더의 모든 파일의 이름을 리스트화 해서 data_list에 저장

3번째 코드블럭:
맨 처음 파일을 열어 그 내용들을 전부 data에 저장

4번째 코드블럭:
텍스트 파일 내의 헤더정보를 뽑아서 딕셔너리화

텍스트 파일 헤더정보 예시:
-------------------------------------------------------------------------------------------------
 품    명: PARKING SPRAG(8속)_<열전>                품    번: 45926-4G100
 측정시간: 2023.10.06. 05:23:36                     측 정 자: 양정훈
 특기사항: 231005_일상검사_야_종_1-6-1_OK
-------------------------------------------------------------------------------------------------
header_info["품명"]:  
품    명: PARKING SPRAG(8속)_<열전>                품    번: 45926-4G100 
-> PARKING SPRAG(8속)_<열전>                품    번: 45926-4G100 
-> PARKING SPRAG(8속)_<열전>                
-> PARKING SPRAG(8속)_<열전>

품번, 측정시간 등의 정보도 유사한 방법으로 추출후 딕셔너리 header_info에 추가

5번 코드블럭:
5번 블럭 부터는 extract_dataframe_from_file.py 의 코드를 해석하고 진행

extract_dataframe_from_file..py
라인 1~2: 필요한 라이브러리 임포트
라인 4~115 함수  extract_dataframe_from_file(file_path)정의
라인 6~7: 매개변수로 받아온 파일 경로에 있는 파일을 읽어 lines에 내용을 저장
라인 10: 행을 저장할 변수 data 선언
라인 13~23: 파일의 헤더정보를 뽑아서 header_info 딕셔너리에 저장
라인: 24~25: header_info의 "품질상태" 항목이 공백이면 값을 "NTC"로 바꿔 저장
라인 29: header_info와 lines의 각 라인에서 정보를 뽑아 저장하기 위한 반복문 시작
라인 30: lines의 각 라인 한줄을 저장하는 변수 line
라인 32~33: line의 첫 문자가 숫자라면 번호와 도형을 읽은 것이므로 number, shape변수에 각각 문자를 나눠서 저장
ex) 3 평면1 -> number: 3 shape: 평면1
->라인 32가 참이라면: {
라인 36: 다음 라인으로 넘어감
라인 37: 도형에 대한 정보를 읽어 저장하기 위한 반복문 시작
라인 38: lines에서 라인 하나를 읽어 저장하는 변수 parts
라인 41~101: 도형에 대한 정보가 존재 한다면 정보의 처음 단어에 따라 
measured_value, standard_value, upper_tolerance, lower_tolerance, deviation, judgement에 각각 정보를 저장.
정보가 공란일 경우 '-'를 저장후 row배열 생성한 후 품명, 품번 등을 포함해 모든 정보를 저장.
미리 생성해 놓은 data배열에 row를 저장.
다음 라인으로 이동.
}
라인 32가 거짓이라면: {
	라인 103: 다음 라인으로 이동해서 반복문을 계속 실행
}

라인 106~113: 배열 data를  판다스 데이터프레임으로 변형

라인 117~123: 이 파일을 직접 실행할 때 실행 되는 메인함수로 데이터셋 폴더의 3번째 파일을 읽어 csv파일로 만듦.

다시 example.ipynb파일로 돌아감.

5번째 코드블럭: extract_dataframe_from_file.py 파일의 extract_dataframe_from_file함수를 임포트 후, 
데이터셋 폴더의 첫번째 파일을 extract_dataframe_from_file함수에 넣어 df에 저장후 출력

6번째 코드블럭(선택사항): 파일이 존재하는 경로를 출력

7번째 코드블럭: 출력폴더 설정 후 폴더가 존재하는지 출럭,
폴더가 존재한다면 그냥 넘어가고, 폴더가 없다면 폴더를 생성

8번째 코드블럭: 데이터셋 폴더 내에 있는 모든 파일들에 대해 전처리 진행 후 csv파일로 저장